<?php

namespace Inck\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * countArticlesByPublication
     *
     * Compte les articles d'un auteur en fonction de certains types :
     *
     * PUBLICATION :
     * var boolean $published
     *
     * CATEGORIES :
     * var string array() $categories
     */
    public function countArticles($published = null, $categories = null)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->select('COUNT(u.articles)');

        /* PUBLICATION: boolean $published */
        if($published !== null) {
            $qb
                ->join('u.articles', 'a')
                ->andWhere($qb->expr()->in('a.published', $published == true ? 1 : 0));
        }

        /* CATEGORIES: string array() $categories */
        if($categories !== null) {
            $qb->join('u.articles', 'a');
            $qb->join('a.categories', 'c');
            foreach($categories as $name) {
                $qb->andWhere($qb->expr()->in('c.name', $name));
            }

        }

        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param string $filterName
     * @param string $columnName
     * @return string
     */
    public function getScoreFilterQuery($filterName, $columnName)
    {
        $qb = $this->createQueryBuilder('u')
            ->select('COUNT(u.id)')
            ->innerJoin('u.articles', 'ua')
            ->where('ua.id = a.id')
            ->andWhere("u.id IN (:$filterName)");

        return sprintf('(%s) AS %s', $qb->getDQL(), $columnName);
    }

    /**
     * @param array $input
     * @return array
     */
    public function getAutocompleteResults($input)
    {
        $query = $this
            ->createQueryBuilder('u')
            ->select('u.id', 'u.username', 'u.firstname', 'u.lastname')
            ->where('u.username LIKE :input')
            ->orWhere('u.firstname LIKE :input')
            ->orWhere('u.lastname LIKE :input')
            ->setParameter('input', "%$input%")
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * @param array $usernames
     * @return array
     */
    public function findWhereUsernameIn($usernames)
    {
        $query = $this
            ->createQueryBuilder('u')
            ->where('u.username IN (:usernames)')
            ->setParameter('usernames', $usernames)
            ->getQuery()
        ;

        return $query->getResult();
    }
}
