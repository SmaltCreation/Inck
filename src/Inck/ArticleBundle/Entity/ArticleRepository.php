<?php

namespace Inck\ArticleBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * superQuery
     *
     * Récupère tous les articles en fonction de différents types :
     *
     * TYPE
     * Brouillons -> as_draft
     * Publiés -> published
     * En modération -> in_moderation
     * En validation (modérés mais non publiés ou approuvés/désapprouvés) -> in_validation
     * Désapprouvés -> disapproved
     *
     * AUTHOR
     * var InckUserBundle:User
     *
     * CATEGORY
     * var int
     *
     * TAG
     * var int
     */
    public function superQuery($type, $author = null, $category = null, $tag = null, $offset = null, $limit = null)
    {
        $query = $this->createQueryBuilder('a');

        /* TYPE: string $type */
        if($type !== null) {
            switch($type) {
                case 'as_draft':
                    $query
                        ->andWhere('a.asDraft = :asDraft')
                        ->setParameter('asDraft', true)
                        ->andWhere('a.postedAt IS NULL')
                        ->orderBy('a.createdAt', 'DESC');
                    break;

                case 'published':
                    $query
                        ->andWhere('a.published = :published')
                        ->setParameter('published', true)
                        ->orderBy('a.publishedAt', 'DESC');
                    break;

                case 'in_moderation':
                    $query
                        ->andWhere('a.published = :published')
                        ->setParameter('published', false)
                        ->andWhere('a.asDraft = :asDraft')
                        ->setParameter('asDraft', false)
                        ->andWhere('a.postedAt >= DATE_SUB(CURRENT_TIMESTAMP(), 1, \'DAY\')')
                        ->orderBy('a.postedAt', 'DESC');
                    break;

                case 'in_validation':
                    $query
                        ->andWhere('a.approved IS :approved')
                        ->setParameter('approved', NULL)
                        ->andWhere('a.asDraft = :asDraft')
                        ->setParameter('asDraft', false)
                        ->andWhere('a.postedAt >= DATE_SUB(CURRENT_TIMESTAMP(), 2, \'DAY\')')
                        ->orderBy('a.postedAt', 'DESC');
                    break;

                case 'disapproved':
                    $query
                        ->andWhere('a.approved = :approved')
                        ->setParameter('approved', false)
                        ->orderBy('a.postedAt', 'DESC');
                    break;

                default:
                    throw new \Exception("Type d'article demandé invalide.");
                    break;
            }
        }

        /* AUTHOR: User $author */
        if($author !== null) {
            $query
                ->andWhere('a.author = :author')
                ->setParameter('author', $author);
        }

        /* CATEGORY: int $category */
        if($category !== null) {
            $query->join('a.categories', 'c')->andWhere($query->expr()->in('c.id', $category));
        }

        /* TAG: int $tag */
        if($tag !== null) {
            $query->join('a.tags', 't')->andWhere($query->expr()->in('t.id', $tag));
        }

        /* OFFSET & LIMIT */
        $query->setFirstResult($offset)->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }
}
