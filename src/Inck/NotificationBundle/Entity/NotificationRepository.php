<?php

namespace Inck\NotificationBundle\Entity;

use DateInterval;
use Doctrine\ORM\EntityRepository;
use Inck\NotificationBundle\Model\NotificationInterface;
use Inck\UserBundle\Entity\User;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    /**
     * @param User $to
     * @return NotificationInterface[]
     */
    public function getNew(User $to)
    {
        $qb = $this->createQueryBuilder('n');

        $qb
            ->select('n')
            ->where('n.to = :to')
            ->setParameter('to', $to)
            ->andWhere('n.displayedAt IS NULL')
            ->orderBy('n.id', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $to
     * @return string
     */
    public function getPaginatorQuery(User $to)
    {
        $qb = $this->createQueryBuilder('n');

        $qb
	        ->select('n')
            ->where('n.to = :to')
            ->setParameter('to', $to)
            ->orderBy('n.id', 'DESC');

        return $qb->getQuery();
    }

	/**
	 * @param NotificationInterface $notification
	 * @param DateInterval $interval
	 *
	 * @return bool
	 * @throws \Exception
	 */
	public function isAlreadySent(NotificationInterface $notification, DateInterval $interval)
	{
		$limit = new \DateTime();
		$limit->sub($interval);

		$qb = $this
			->getEntityManager()
			->createQueryBuilder()
			->select('COUNT(n)');

		if ($notification instanceof SubscriberNotification) {
			$qb
				->from('InckNotificationBundle:SubscriberNotification', 'n')
				->where('n.subscriber = :subscriber')
				->setParameter('subscriber', $notification->getSubscriber());
		}

		else if ($notification instanceof ArticleNotification) {
			$qb
				->from('InckNotificationBundle:ArticleNotification', 'n')
				->where('n.article = :article')
				->setParameter('article', $notification->getArticle());
		}

		else {
			throw new \Exception('Unsupported notification type');
		}

		$qb
			->andWhere('n.to = :to')
			->setParameter('to', $notification->getTo())
			->andWhere('n.createdAt >= :createdAt')
			->setParameter('createdAt', $limit->format('Y-m-d H:i:s'));

		return ((int) $qb->getQuery()->getSingleScalarResult() !== 0);
	}
}
